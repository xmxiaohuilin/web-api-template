/* global __ROOT_DIR */
require(`${__ROOT_DIR.TEST_SUPPORT}/_all.js`);

let expect = require('expect.js');

let getPredictions       = require(`${__ROOT_DIR.LIB}/elasticsearch_wrapper/get_predictions`);
let elasticsearchWrapper = require(`${__ROOT_DIR.LIB}/elasticsearch_wrapper.js`);

describe('.getPredictions()', function() {
  let _error           = new Error();
  let _queryBuilder    = require(`${__ROOT_DIR.LIB}/elasticsearch_query_builder`);
  let _mapOfAllIndexes = elasticsearchWrapper._indexes;

  it('is a function', function() {
    expect(getPredictions).to.be.a('function');
  });

  it('calls _sharedClient.search with the query generated by queryBuilder', function() {
    let _sharedClient = {
      search: function stubbedSearch(query) {
        return query;
      },
    };

    let input = {
      lastGuid: '123',
      pageNum: 2,
      _error, _sharedClient, _queryBuilder, _mapOfAllIndexes,
    };

    let expected = {
      index: _mapOfAllIndexes.predictionIndex,
      size: 10,
      from: 10,
      body: {
        query: {
          filtered : {query: {bool: {}},
            filter: {
              bool: {
                must: [
                  {
                    term: {guid: '123'},
                  },
                  {
                    range: {score: {gt: 0.3, lt: 1}},
                  },
                ],
              },
            },
          },
        },
        sort: [
          {score: {order: 'desc'}},
        ],
      },
    };

    expect(getPredictions(input)).to.eql(expected);
  });

  context('guards against bad parameters', function() {
    it(`throws error if value of params.ortOrder is not 'asc' or 'desc'`, function() {
      let input = {
        lastGuid: '123',
        pageNum: 2,
        sortOrder: 'order',
      };
      let errorMessageRegex = /must be one of value/;

      expect(getPredictions).withArgs(input).to.throwException(errorMessageRegex);
    });

    it('throws error if params.lastGuid and params.pageNum are not present', function() {
      let input = {sortOrder: 'asc'};
      let errorMessageRegex = /must be present/;

      expect(getPredictions).withArgs(input).to.throwException(errorMessageRegex);
    });

    it('throws error if params.pageNum is not integer', function() {
      let input = {
        lastGuid: '123',
        pageNum: 2.5,
      };
      let errorMessageRegex = /must be positive integer/;

      expect(getPredictions).withArgs(input).to.throwException(errorMessageRegex);
    });

    it('throws error if params.pageNum is not postive', function() {
      let input = {
        lastGuid: '123',
        pageNum: -2,
      };
      let errorMessageRegex = /must be positive integer/;

      expect(getPredictions).withArgs(input).to.throwException(errorMessageRegex);
    });
  });

  xit('TODO: add real tests with local instance or stub the http request');
});
